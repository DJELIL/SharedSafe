REATE TABLE projets (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
nom VARCHAR(100) NOT NULL,
description VARCHAR(255),
date_creation DATE DEFAULT CURRENT_DATE
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 1
REATE
Script processed in 4.278 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL DEFAULT 0
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 3, column 40
DEFAULT
Script processed in 6.805 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL DEFAULT 0
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 3, column 40
DEFAULT
REATE TABLE projets (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
nom VARCHAR(100) NOT NULL,
description VARCHAR(255),
date_creation DATE DEFAULT CURRENT_DATE
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 1
REATE
CREATE TABLE personnes (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
nom VARCHAR(100) NOT NULL,
prenom VARCHAR(100),
contact VARCHAR(100)
)
CREATE TABLE contributions (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
projet_id INTEGER NOT NULL,
personne_id INTEGER NOT NULL,
montant DECIMAL(15,2) NOT NULL,
date_contribution DATE DEFAULT CURRENT_DATE,
CONSTRAINT fk_contrib_projet FOREIGN KEY (projet_id) REFERENCES projets(id),
CONSTRAINT fk_contrib_personne FOREIGN KEY (personne_id) REFERENCES personnes(id)
)
unsuccessful metadata update
CREATE TABLE CONTRIBUTIONS failed
Table PROJETS not found
CREATE TABLE transactions (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
type_transaction VARCHAR(20) NOT NULL,
montant DECIMAL(15,2) NOT NULL,
projet_id INTEGER,
personne_id INTEGER,
date_transaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT chk_type CHECK (type_transaction IN ('DEPOT','RETRAIT','DEPENSE','TRANSFERT')),
CONSTRAINT fk_trans_projet FOREIGN KEY (projet_id) REFERENCES projets(id),
CONSTRAINT fk_trans_personne FOREIGN KEY (personne_id) REFERENCES personnes(id)
)
unsuccessful metadata update
CREATE TABLE TRANSACTIONS failed
Table PROJETS not found
Script processed in 28.939 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL DEFAULT 0
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 3, column 40
DEFAULT
Script processed in 2.845 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL DEFAULT 0
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 3, column 40
DEFAULT
Script processed in 12.592 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL DEFAULT 0
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 3, column 40
DEFAULT
Script processed in 3.338 sec
CREATE TABLE projets (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
nom VARCHAR(100) NOT NULL,
description VARCHAR(255),
date_creation DATE DEFAULT CURRENT_DATE
)
Script processed in 0.019 sec
CREATE TABLE personnes (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
nom VARCHAR(100) NOT NULL,
prenom VARCHAR(100),
contact VARCHAR(100)
)
Script processed in 0.017 sec
CREATE TABLE contributions (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
projet_id INTEGER NOT NULL,
personne_id INTEGER NOT NULL,
montant DECIMAL(15,2) NOT NULL,
date_contribution DATE DEFAULT CURRENT_DATE,
CONSTRAINT fk_contrib_projet FOREIGN KEY (projet_id) REFERENCES projets(id),
CONSTRAINT fk_contrib_personne FOREIGN KEY (personne_id) REFERENCES personnes(id)
)
Script processed in 0.004 sec
CREATE TABLE transactions (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
type_transaction VARCHAR(20) NOT NULL,
montant DECIMAL(15,2) NOT NULL,
projet_id INTEGER,
personne_id INTEGER,
date_transaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT chk_type CHECK (type_transaction IN ('DEPOT','RETRAIT','DEPENSE','TRANSFERT')),
CONSTRAINT fk_trans_projet FOREIGN KEY (projet_id) REFERENCES projets(id),
CONSTRAINT fk_trans_personne FOREIGN KEY (personne_id) REFERENCES personnes(id)
)
Script processed in 0.005 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL DEFAULT 0
)
Dynamic SQL Error
SQL error code = -104
Token unknown - line 3, column 40
DEFAULT
Script processed in 1.905 sec
CREATE TABLE coffre_fort (
id INTEGER NOT NULL PRIMARY KEY,
solde_total DECIMAL(15,2) NOT NULL
)
Script processed in 0.001 sec
INSERT INTO coffre_fort (id, solde_total) VALUES (1, 0)
Script processed in 0.018 sec
CREATE TRIGGER trg_depot FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'DEPOT') THEN
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;
END IF
Dynamic SQL Error
SQL error code = -104
Token unknown - line 9, column 7
IF
Script processed in 5.868 sec
CREATE TRIGGER trg_depot FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'DEPOT') THEN
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;
END IF
Dynamic SQL Error
SQL error code = -104
Token unknown - line 9, column 7
IF
Script processed in 2.239 sec
CREATE TRIGGER trg_depot FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'DEPOT') THEN
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;

END
CREATE TRIGGER trg_retrait FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction IN ('RETRAIT','DEPENSE')) THEN
UPDATE coffre_fort
SET solde_total = solde_total - NEW.montant
WHERE id = 1;
END IF
Dynamic SQL Error
SQL error code = -104
Token unknown - line 9, column 7
IF
Script processed in 8.583 sec
CREATE TRIGGER trg_depot FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'DEPOT') THEN
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;

END
unsuccessful metadata update
CREATE TRIGGER TRG_DEPOT failed
violation of PRIMARY or UNIQUE KEY constraint "RDB$INDEX_8" on table "RDB$TRIGGERS"
Problematic key value is ("RDB$TRIGGER_NAME" = 'TRG_DEPOT')
Script processed in 29.459 sec
CREATE TRIGGER trg_depot FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'DEPOT') THEN
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;

END
CREATE TRIGGER trg_retrait FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction IN ('RETRAIT','DEPENSE')) THEN
UPDATE coffre_fort
SET solde_total = solde_total - NEW.montant
WHERE id = 1;

END
Script processed in 0.019 sec
CREATE OR ALTER VIEW v_solde_personne AS
SELECT
p.id AS personne_id,
p.nom,
p.prenom,
COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('RETRAIT','DEPENSE') THEN -t.montant
ELSE 0
END
), 0) AS solde_personne
FROM personnes p
LEFT JOIN transactions t ON p.id = t.personne_id
GROUP BY p.id, p.nom, p.prenom
CREATE OR ALTER VIEW v_solde_projet AS
SELECT
pr.id AS projet_id,
pr.nom AS projet_nom,
COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('DEPENSE','RETRAIT') THEN -t.montant
ELSE 0
END
), 0) AS solde_projet
FROM projets pr
LEFT JOIN transactions t ON pr.id = t.projet_id
GROUP BY pr.id, pr.nom
CREATE OR ALTER VIEW v_solde_personne_projet AS
SELECT
pr.id AS projet_id,
pr.nom AS projet_nom,
p.id AS personne_id,
p.nom AS personne_nom,
p.prenom AS personne_prenom,
COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('DEPENSE','RETRAIT') THEN -t.montant
ELSE 0
END
), 0) AS solde_personne_projet
FROM personnes p
JOIN contributions c ON p.id = c.personne_id
JOIN projets pr ON c.projet_id = pr.id
LEFT JOIN transactions t ON p.id = t.personne_id AND pr.id = t.projet_id
GROUP BY pr.id, pr.nom, p.id, p.nom, p.prenom
Script processed in 0.005 sec
CREATE OR ALTER PROCEDURE get_solde_personne (
pid INTEGER
) RETURNS (
solde DECIMAL(15,2)
)
AS
BEGIN
SELECT COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('DEPENSE','RETRAIT') THEN -t.montant
ELSE 0
END
), 0)
FROM transactions t
WHERE t.personne_id = :pid
INTO :solde;
SUSPEND;
END
Script processed in 0.004 sec
CREATE OR ALTER PROCEDURE get_solde_personne (
pid INTEGER
) RETURNS (
solde DECIMAL(15,2)
)
AS
BEGIN
SELECT COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('DEPENSE','RETRAIT') THEN -t.montant
ELSE 0
END
), 0)
FROM transactions t
WHERE t.personne_id = :pid
INTO :solde;

SUSPEND;
END
Script processed in 0.020 sec
CREATE OR ALTER PROCEDURE get_solde_projet (
proj_id INTEGER
) RETURNS (
solde DECIMAL(15,2)
)
AS
BEGIN
SELECT COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('DEPENSE','RETRAIT') THEN -t.montant
ELSE 0
END
), 0)
FROM transactions t
WHERE t.projet_id = :proj_id
INTO :solde;

SUSPEND;
END
Script processed in 0.018 sec
CREATE OR ALTER PROCEDURE get_solde_personne_projet (
pid INTEGER,
proj_id INTEGER
) RETURNS (
solde DECIMAL(15,2)
)
AS
BEGIN
SELECT COALESCE(SUM(
CASE
WHEN t.type_transaction = 'DEPOT' THEN t.montant
WHEN t.type_transaction IN ('DEPENSE','RETRAIT') THEN -t.montant
ELSE 0
END
), 0)
FROM transactions t
WHERE t.personne_id = :pid AND t.projet_id = :proj_id
INTO :solde;

SUSPEND;
END
Script processed in 0.018 sec
CREATE TABLE dettes (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
projet_id INTEGER NOT NULL,
montant DECIMAL(15,2) NOT NULL,
statut VARCHAR(20) DEFAULT 'EN_COURS', -- EN_COURS / REMBOURSE
date_dette DATE DEFAULT CURRENT_DATE,
date_remboursement DATE,
CONSTRAINT fk_dette_projet FOREIGN KEY (projet_id) REFERENCES projets(id)
)
Script processed in 0.019 sec
LTER TABLE transactions
ADD CONSTRAINT chk_type_transaction
CHECK (type_transaction IN ('DEPOT','RETRAIT','DEPENSE','TRANSFERT','EMPRUNT','REMBOURSEMENT'))
Dynamic SQL Error
SQL error code = -104
Token unknown - line 1, column 1
LTER
Script processed in 8.718 sec
ALTER TABLE transactions
ADD CONSTRAINT chk_type_transaction
CHECK (type_transaction IN ('DEPOT','RETRAIT','DEPENSE','TRANSFERT','EMPRUNT','REMBOURSEMENT'))
Script processed in 0.001 sec
CREATE OR ALTER TRIGGER trg_emprunt FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'EMPRUNT') THEN
-- خصم المبلغ من الصندوق
UPDATE coffre_fort
SET solde_total = solde_total - NEW.montant
WHERE id = 1;

-- تسجيل الدين
INSERT INTO dettes (projet_id, montant)
VALUES (NEW.projet_id, NEW.montant);
END
END
Dynamic SQL Error
SQL error code = -104
Token unknown - line 15, column 1
END
Script processed in 8.684 sec
CREATE OR ALTER TRIGGER trg_emprunt FOR transactions
AFTER INSERT
AS
BEGIN
IF (NEW.type_transaction = 'EMPRUNT') THEN
BEGIN
-- خصم المبلغ من الصندوق
UPDATE coffre_fort
SET solde_total = solde_total - NEW.montant
WHERE id = 1;

-- تسجيل الدين
INSERT INTO dettes (projet_id, montant)
VALUES (NEW.projet_id, NEW.montant);
END
END
Script processed in 0.018 sec
CREATE OR ALTER TRIGGER trg_remboursement FOR transactions
AFTER INSERT
AS
DECLARE VARIABLE dette_id INTEGER;
BEGIN
IF (NEW.type_transaction = 'REMBOURSEMENT') THEN
BEGIN
-- إرجاع المبلغ إلى الصندوق
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;

-- تحديث الدين (إغلاق أو تقليل)
SELECT FIRST 1 id FROM dettes
WHERE projet_id = NEW.projet_id AND statut = 'EN_COURS'
ORDER BY date_dette
INTO :dette_id;

IF (dette_id IS NOT NULL) THEN
UPDATE dettes
SET statut = 'REMBOURSE',
date_remboursement = CURRENT_DATE
WHERE id = :dette_id;
END;
END
END
Dynamic SQL Error
SQL error code = -104
Token unknown - line 24, column 8
;
Script processed in 6.719 sec
CREATE OR ALTER TRIGGER trg_remboursement FOR transactions
AFTER INSERT
AS
DECLARE VARIABLE dette_id INTEGER;
BEGIN
IF (NEW.type_transaction = 'REMBOURSEMENT') THEN
BEGIN
-- إرجاع المبلغ إلى الصندوق
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;

-- تحديث الدين (إغلاق أو تقليل)
SELECT FIRST 1 id FROM dettes
WHERE projet_id = NEW.projet_id AND statut = 'EN_COURS'
ORDER BY date_dette
INTO :dette_id;

IF (dette_id IS NOT NULL) THEN
UPDATE dettes
SET statut = 'REMBOURSE',
date_remboursement = CURRENT_DATE
WHERE id = :dette_id;
END
END
END
Dynamic SQL Error
SQL error code = -104
Token unknown - line 26, column 1
END
Script processed in 1.756 sec
CREATE OR ALTER TRIGGER trg_remboursement FOR transactions
AFTER INSERT
AS
DECLARE VARIABLE dette_id INTEGER;
BEGIN
IF (NEW.type_transaction = 'REMBOURSEMENT') THEN
BEGIN
-- إرجاع المبلغ إلى الصندوق
UPDATE coffre_fort
SET solde_total = solde_total + NEW.montant
WHERE id = 1;

-- تحديث الدين (إغلاق أو تقليل)
SELECT FIRST 1 id FROM dettes
WHERE projet_id = NEW.projet_id AND statut = 'EN_COURS'
ORDER BY date_dette
INTO :dette_id;

IF (dette_id IS NOT NULL) THEN
UPDATE dettes
SET statut = 'REMBOURSE',
date_remboursement = CURRENT_DATE
WHERE id = :dette_id;
END

END
Script processed in 0.001 sec
CREATE OR ALTER PROCEDURE get_dettes_projet (
proj_id INTEGER
) RETURNS (
total_dettes DECIMAL(15,2),
dettes_non_rembourse DECIMAL(15,2)
)
AS
BEGIN
-- مجموع كل الديون (مستدانة)
SELECT COALESCE(SUM(montant), 0)
FROM dettes
WHERE projet_id = :proj_id
INTO :total_dettes;

-- مجموع الديون غير المسددة فقط
SELECT COALESCE(SUM(montant), 0)
FROM dettes
WHERE projet_id = :proj_id AND statut = 'EN_COURS'
INTO :dettes_non_rembourse;

SUSPEND;
END
Script processed in 0.002 sec
CREATE TABLE virements_programmes (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
projet_id INTEGER NOT NULL,
personne_id INTEGER, -- اختياري: إذا كان التحويل من شخص محدد
montant DECIMAL(15,2) NOT NULL,
frequence VARCHAR(20) NOT NULL, -- JOURNALIER, HEBDO, MENSUEL
date_debut DATE NOT NULL,
date_fin DATE,
prochain_virement DATE NOT NULL,
actif SMALLINT DEFAULT 1, -- 1 = نشط, 0 = متوقف
CONSTRAINT fk_virement_projet FOREIGN KEY (projet_id) REFERENCES projets(id),
CONSTRAINT fk_virement_personne FOREIGN KEY (personne_id) REFERENCES personnes(id)
)
Script processed in 0.019 sec
CREATE OR ALTER PROCEDURE executer_virements_programmes
AS
DECLARE VARIABLE vid INTEGER;
DECLARE VARIABLE vproj INTEGER;
DECLARE VARIABLE vpersonne INTEGER;
DECLARE VARIABLE vmontant DECIMAL(15,2);
DECLARE VARIABLE vfreq VARCHAR(20);
DECLARE VARIABLE vprochain DATE;
BEGIN
FOR SELECT id, projet_id, personne_id, montant, frequence, prochain_virement
FROM virements_programmes
WHERE actif = 1 AND prochain_virement <= CURRENT_DATE
INTO :vid, :vproj, :vpersonne, :vmontant, :vfreq, :vprochain
DO
BEGIN
-- إدخال العملية في جدول transactions
INSERT INTO transactions (type_transaction, montant, projet_id, personne_id, date_transaction)
VALUES ('DEPOT', :vmontant, :vproj, :vpersonne, CURRENT_TIMESTAMP);

-- حساب التاريخ القادم
IF (:vfreq = 'JOURNALIER') THEN
UPDATE virements_programmes SET prochain_virement = DATEADD(1 DAY TO :vprochain) WHERE id = :vid;
ELSE IF (:vfreq = 'HEBDO') THEN
UPDATE virements_programmes SET prochain_virement = DATEADD(1 WEEK TO :vprochain) WHERE id = :vid;
ELSE IF (:vfreq = 'MENSUEL') THEN
UPDATE virements_programmes SET prochain_virement = DATEADD(1 MONTH TO :vprochain) WHERE id = :vid;
END
END
Script processed in 0.018 sec
